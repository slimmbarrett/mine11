let mineCount = 3;
let mines = [];
const grid = document.getElementById("grid");
const mineCountDisplay = document.getElementById("mineCount");

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏
function createGrid() {
    grid.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ç–∫–∏
    for (let i = 0; i < 25; i++) {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        grid.appendChild(cell);
    }
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
function increaseMines() {
    if (mineCount < 24) {
        mineCount++;
        mineCountDisplay.textContent = mineCount;
    }
}

// –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
function decreaseMines() {
    if (mineCount > 1) {
        mineCount--;
        mineCountDisplay.textContent = mineCount;
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
function startGame() {
    createGrid(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
    mines = generateMines(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –º–∏–Ω
    revealAllCells(); // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —è—á–µ–µ–∫ —Å—Ä–∞–∑—É
    alert("–ú–∏–Ω—ã —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã. –ù–∞–π–¥–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏!");
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —è—á–µ–µ–∫ —Å—Ä–∞–∑—É
function revealAllCells() {
    const cells = Array.from(grid.children);
    cells.forEach((cell, index) => {
        if (mines.includes(index)) {
            // –ï—Å–ª–∏ —ç—Ç–æ –º–∏–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª üí£
            cell.textContent = "üí£"; 
            cell.classList.add("mine");
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—É
            cell.textContent = "‚≠ê"; // –ü–æ—è–≤–ª—è–µ—Ç—Å—è –∑–≤–µ–∑–¥–∞
            cell.classList.add("safe");
        }
        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —è—á–µ–π–∫—É
        cell.removeEventListener("click", () => revealCell(index, cell));
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∏–Ω
function generateMines() {
    const minePositions = new Set();
    while (minePositions.size < mineCount) {
        const randomIndex = Math.floor(Math.random() * 25);
        minePositions.add(randomIndex);
    }
    return Array.from(minePositions);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = () => {
    createGrid(); // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
};
